== Developing application with FUSE

Before you start, make sure you have installed the following software:

http://openjdk.java.net/install/Java[SE Development Kit (JDK) version 1.8.x (Java 8)]

https://maven.apache.org/download.cgi[Apache Maven]



This workshop is for Red Hat integration bundle and
shows simple case for developing an a API based Cloud Native application.




=== Developing API

==== API First approach

An API-first approach means that for any given development project,
your APIs are treated as “first-class citizens.” That everything about a project revolves around
the idea that the end product will be consumed by mobile devices, and that APIs will be consumed by client applications.


https://swagger.io/resources/articles/adopting-an-api-first-approach/


The Benefits of an API-First Approach:

* Development teams can work in parallel

* Ensures good developer experiences

* Reduces the risk of failure

==== Design API with Apicurio



The officially supported is a
 https://github.com/Apicurio/apicurito/tree/master/operator[apicurito] and it is installed with operator



image::./docs/images/Apicurio001.png[role=”left”]

image::./docs/images/Apicurio002.png[role=”left”]

image::./docs/images/Apicurio003.png[role=”left”]

Official opensource project is  https://apicurio-studio.readme.io[Apicurio Studio]  and
it can generate https://https://quarkus.io/.io/[quarkus] framework 


Design your API with http://spec.openapis.org/oas/v3.0.2[OpenAPI v3.0]:

image::./docs/images/Apicurio004.png[role=”left”]


Click generate button from Apicurio gui.
It will generate you a fuse7 project -   download it unzip, correct and run.


image::./docs/images/Apicurio005.png[role=”left”]



Another option will be to  export openapi json file and generate java classes using swagger maven plugin.

Example for pom.xml with swagger-maven plugin configuration:

[source,xml]
----
  <plugin>
      <groupId>io.swagger.codegen.v3</groupId>
      <artifactId>swagger-codegen-maven-plugin</artifactId>
      <version>3.0.11</version>
      <configuration>
          <inputSpec>${swagger.file}</inputSpec>
      </configuration>
      <executions>
          <execution>
              <id>generate-swagger-spring</id>
              <phase>generate-sources</phase>
              <goals>
                  <goal>generate</goal>
              </goals>
              <configuration>
                  <language>spring</language>
                  <modelPackage>${project.groupId}.swagger.model</modelPackage>
                  <apiPackage>${project.groupId}.swagger.api</apiPackage>
                  <invokerPackage>${project.groupId}.swagger.invoker</invokerPackage>
              </configuration>
          </execution>
      </executions>
  </plugin>
----

Example for project can be found in repository:

----
fuse7-api-first/service-generated
----



=== Build and Deploy on OpenShift

login to your OpenShift and select project:

[source,bash]
----
oc project
Using project "nikofuse" on server "https://master00-dc8c.generic.opentlc.com:443".
mvn clean -DskipTests fabric8:deploy -Popenshift

#some seconds later...

INFO] Creating a Service from openshift.yml namespace nikofuse name spring-boot-cxf-jaxrs
[INFO] Created Service: target/fabric8/applyJson/nikofuse/service-spring-boot-cxf-jaxrs.json
[INFO] Using project: nikofuse
[INFO] Creating a DeploymentConfig from openshift.yml namespace nikofuse name spring-boot-cxf-jaxrs
[INFO] Created DeploymentConfig: target/fabric8/applyJson/nikofuse/deploymentconfig-spring-boot-cxf-jaxrs.json
[INFO] Creating Route nikofuse:spring-boot-cxf-jaxrs host: null
[INFO] F8: HINT: Use the command `oc get pods -w` to watch your pods start up
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 05:54 min
[INFO] Finished at: 2019-09-19T10:56:45+02:00
[INFO] ------------------------------------------------------------------------

----

See deployment in the OpenShift web-console:

image::./docs/images/spring_app_deployed.png[Spring_deployment,640,480]


Add api to 3scale:

image::./docs/images/3scale_add_api.png[3scale,640,480]

Enhance api security with key !

and call it:


[source,bash]
----
curl -kv "https://api-3scale-apicast-staging.apps-dc8c.generic.opentlc.com:443/services/helloservice?user_key=3d4094d3eb6c056e455bfdccd6f010c5"
----

You create your first secure api !




=== Code First approach


==== Create Fuse7 Project for OpenShift


----
mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \
  -DarchetypeCatalog=https://maven.repository.redhat.com/ga/io/fabric8/archetypes/archetypes-catalog/2.2.0.fuse-740017-redhat-00003/archetypes-catalog-2.2.0.fuse-740017-redhat-00003-archetype-catalog.xml \
  -DarchetypeGroupId=org.jboss.fuse.fis.archetypes \
  -DarchetypeArtifactId=spring-boot-camel-xml-archetype \
  -DarchetypeVersion=2.2.0.fuse-740017-redhat-00003
----


to generate  Swagger support

----
mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate \
  -DarchetypeCatalog=https://maven.repository.redhat.com/ga/io/fabric8/archetypes/archetypes-catalog/2.2.0.fuse-740017-redhat-00003/archetypes-catalog-2.2.0.fuse-740017-redhat-00003-archetype-catalog.xml \
  -DarchetypeGroupId=org.jboss.fuse.fis.archetypes \
  -DarchetypeArtifactId=spring-boot-cxf-jaxrs-archetype \
  -DarchetypeVersion=2.2.0.fuse-740017-redhat-00003


....




Define value for property 'artifactId': : epenxes-manager
Define value for property 'version':  1.0-SNAPSHOT: :
Define value for property 'package':  fuse.redcloud.site: :
Confirm properties configuration:
groupId: redcloud.site
artifactId: expenses-manager
version: 1.0-SNAPSHOT
package: fuse.redcloud.site
 Y: : y

----




== Fuse Console

install template if it is not present:

----
oc create \
    -n openshift \
     -f https://raw.githubusercontent.com/jboss-fuse/application-templates/application-templates-2.1.fuse-000099-redhat-5/fis-console-namespace-template.json
----
